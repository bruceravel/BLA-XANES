
* Convert bent-laue analyzer images to XANES data

** Synopsis

A measurement set consists of

 + A column data file with columns of energy and scalars from the
   measurement.

 + One Pilatus image for each energy point containing the HERFD signal
   at that point.

 + A set of Pilatus images taken at energies around the fluorescence
   energy.  These are used to make a mask which identifies which
   pixels contain signal related to specific emission energies.

This software uses perl and either [[https://metacpan.org/module/Imager][Imager]] or [[https://metacpan.org/module/Image::Magick][Image::Magick]] to process
the images into a high resolution XANES spectrum.  The two backends
produce identical results.

** Installation

By default, Imager will be used for image handling.  If it is not
already on your computer, it will be installed at the ~installdeps~
step.  If you plan to use Image Magick, compile it to use signed 32
bit numbers as explained see below.

To install, do the following:

:      perl Build.PL
:      sudo ./Build installdeps  ## (if necessary)
:      ./Build
:      ./Build test
:      sudo ./Build install

At the ~perl Build.PL~ step, you may see an error message like the
following if either image handling backend is absent.  

:     Checking prerequisites...
:       recommends:
:         *  Image::Magick is not installed

If you plan to use the default Imager backend, then you can safely
ignore the warning about Image::Magick being missing.


** Usage

There are three programs installed from the bin/ folder.  ~herfd~ is
used to make a single HERFD spectrum at a specific emission energy.
~rixs~ is used to generate a sequence of HERFD spectra at a sequence
of emission energies.  ~bla-map~ is used to convert a series of
elastic images to an energy vs. pixel map.

*** The herfd script

:  herfd [options] <stub>
:
:     --config  | -c         [string]  configuration file (required)
:     --energy  | -e         [integer] emission energy (required)
:     --animate | -a         [flag]    save tiff animation of mask creation
:     --save    | -s         [flag]    save tiff with mask
:     --verbose | -v         [flag]    write progress messages
:     --nocolor | -n         [flag]    turn off color coding of screen output
:     --quiet   | -q         [flag]    suppress progress messages
:     --help    | -h         [flag]    write this message and exit

  
The ~herfd~ script assumes that scan files and image files have
related names.  In this example, the scan file is called ~Aufoil1.001~
and the image files are called ~Aufoil1_NNNNN.tif~.  The ~NNNNN~ in
the image file name indicates the data point and is reflected in one
of the columns of the scan file.  If your data do not follow these
patterns, this script will fail.  File locations are specified in the
configuration file.

:  example:  herfd -c /path/to/config.ini -e 9713 -a Aufoil1

Here, "Aufoil1" is the stub, i.e. the basename of the scan and image
files, and the ~-c~, ~-e~, and ~-a~ command line options are
demonstrated.

*** The rixs script

:  rixs [options] <stub>
:
:     --config  | -c         [string]  configuration file (required)
:     --animate | -a         [flag]    save tiff animation of mask creation
:     --save    | -s         [flag]    save tiff with mask
:     --verbose | -v         [flag]    write progress messages
:     --nocolor | -n         [flag]    turn off color coding of screen output
:     --quiet   | -q         [flag]    suppress progress messages
:     --help    | -h         [flag]    write this message and exit

The ~rixs~ script assumes that scan files and image files have related
names.  In this example, the scan file is called ~Aufoil1.001~ and the
image files are called ~Aufoil1_NNNNN.tif~.  The ~NNNNN~ in the image
file name indicates the data point and is reflected in one of the
columns of the scan file.  If your data do not follow these patterns,
this script will fail.  Masks are created from the elastic images at
each emission energy.  File locations are specified in the
configuration file.

:  example:  rixs -c /path/to/config.ini -a Aufoil1

*** The bla-map script

:  bla-map [options] <stub>
:
:     --config  | -c         [string]  configuration file (required)
:     --reuse   | -r         [flag]    reuse mask files if found in outfolder
:     --verbose | -v         [flag]    write progress messages
:     --nocolor | -n         [flag]    turn off color coding of screen output
:     --quiet   | -q         [flag]    suppress progress messages
:     --help    | -h         [flag]    write this message and exit

The ~rixs~ script assumes that the image files are named
~<stub>_<energy>_00001.tif~.  The ~<stub>~ in the image file name
indicates common part of the name of the files associated with the
measurement.  The ~<energy>~ part is the energy of the incident beam.
If your elastic image files do not follow this patterns, this script
will fail.  Masks are created from the elastic images at each emission
energy.  File locations are specified in the configuration file.

:  example:  bla-map -c /path/to/config.ini Aufoil1

The output of this program is a datafile in a [[http://gnuplot.info/docs_4.2/gnuplot.html#x1-33600045.1.2][simple format]] which can
be read by gnuplot and a gnuplot script for displaying the data.  The
resulting image will plot a map of detector column vs detector row
with the color axis showing energy.

*** The configuration file

The configuration file is in the Windows-style ini format.  Here is an
example.

:   [measure]
:   emission   = 9703 9705 9707 9709 9711 9713 9715 9717 9719
:   scanfolder = /home/bruce/Data/NIST/10ID/2011.12/scans
:   tiffolder  = /home/bruce/Data/NIST/10ID/2011.12/tiffs
:   outfolder  = /home/bruce/Data/NIST/10ID/2011.12/processed
:
:   [pixel]
:   maskmode = 2
:   bad    = 400
:   weak   = 2
:   lonely = 2
:   social = 2
:   radius = 2

The ~emission~ item, which is not used by the ~herfd~ script, contains
the list of emission energies at which to generate HERFD spectra.  The
other three items are the locations of the scan files, the image
files, and the output files.

This configuration file can sit anywhere on disk and *must* be
specified at the command line for either script.  I would recommend
that you put it in the current work directory wherever you are working
on your data.  You may wish to keep multiple configuration files
around for different experiments, different edges, etc.

The four items in the ~[pixel]~ section are used in mask creation, as
explained below under "Mask".

*** Error checking

Neither script is particularly robust in terms of flagging problems.
You should not expect particularly useful error messages if the
folders in the configuration file are not correct or if you give an
emission energy value that was not measured as an elastic image.  In
those cases, the program will almost certainly fail with some kind of
stack trace, but probably not with an immediately useful error
message.

** Mask

Along with each scan, a series of images are collected with the
incident beam at energies around the L alpha 1 line.  The XANES can be
extracted, then, as a function of emission energy by creating a mask
from the elastic energy which identifies the pixels on the camera that
are illuminated by photons of that energy.

For a given emission energy, the elastic image is read and processed
in three steps:

 1. Set the bad pixels (i.e. those with spuriously large values) to
    zero.  The "spuriously large value" is defined as larger than the
    bad pixel value from the configuration file.  Also remove all weak
    pixels, i.e. those with fewer than some cutoff, defined by the
    weak pixel value from the configuration file.

 2. lonely/social algorith,

    + Remove all "lonely" pixels.  These are the pixels that are
      illuminated but surrounded by fewer illuminated pixels than the
      lonely pixel value in the configuration file.

    + Add in all "social" pixels.  These are pixels which are dark, but
      are surrounded by enough illuminated pixels (i.e. more than the
      social pixel value from the configuration file) such that it, too,
      should be illuminated.

 3. areal meadin/mean algorithm

    + blah blah

This results in a simple logical-AND mask for evaluating the signal at
each energy point from the Pilatus image.

When the ~-a~ flag is used with the ~herfd~ or ~rixs~ scripts, a 3- or
4-frame animated tiff file will be written which shows the steps from
elastic image to final mask.

** Scan conversion

At each energy point, the HERFD signal is computed from the Pilatus
image using the mask created by the algorithm described above.  The
counts on each pixel lying within the illuminated portion of the mask
are summed.  This sum is the HERFD signal at that incident energy.

A column data file is written containing the energy and several
scalars from the original measurement and a column containing the
HERFD signal.  This file can be imported directly into Athena.

** Working with Imager

Imager works out of the box on both linux and Windows, although the
way it handles 32-bit numbers with its inherent 24-bit sample depth is
somewhat confusing.

** Working with Image Magick

I am using [[http://www.imagemagick.org/script/index.php][Image Magick]] and its [[http://www.imagemagick.org/script/perl-magick.php][Perl interface]] as one of the image
handling backends for this project.  As delivered, Image Magick cannot
handle the TIFF files as written by the [[http://www.dectris.com/sites/pilatus100k.html][Pilatus 100K]] imagine detector.
In order to be able to use Image Magick, it must be recompiled with a
larger bit depth.  This is done by re-compiling from source code.

You must have [[http://www.libtiff.org/][libtiff]] and its development libraries installed so that
Image Magick gets compiled with support for tiff files.  On Ubunutu,
it is called ~libtiff4-dev~.

Grab the trunk of the Image Magick development version

:       svn co https://www.imagemagick.org/subversion/ImageMagick/trunk ImageMagick

then

:      ./configure --with-quantum-depth=32

Presumably, the same could be done with any Image Magick source
tarball.

I also rebuilt the perl wrapper which comes with the Image Magick
source code in the ~PerlMagick~ folder.  This also was a bit tricky.
My Ubuntu system has perl 5.10.1 and therefore has a
~libperl.5.10.1.so~.  It did not, however, have a ~libperl.so~
symlinked to it.  To get the perl wrapper to build, I had to do

:      sudo ln -s /usr/lib/libperl.so.5.10.1 /usr/lib/libperl.so

Adjust the version number on the perl library as needed for your
computer.

I was unable to compile Image Magick for Windows using MinGW, even
armed with a fairly complete set of GnuWin32 libraries and even
attempting it with a stable version (as opposed to the development
trunk).  Oh well....
