#!/usr/bin/perl

BEGIN {
  if ($^O =~ /MSWin32/) {
    my $fname='C:\strawberry\c\bin\etc\fonts\fonts.conf';
    $ENV{FONTCONFIG_FILE}=$fname if -e $fname;
  };
}

use feature 'switch';
use Xray::BLA; # automatically turns on strict and warnings
use Xray::BLA::Image;
use Config::IniFiles;
use Getopt::Long;
use Pod::Usage;
use Scalar::Util qw(looks_like_number);

my $energy     = 0;
my $point      = -1;
my $reuse      = 0;
my $save       = 0;
my $animate    = 0;
my $plot       = 0;
my $verbose    = 1;
my $configfile = q{};
my $xdiini     = q{};      # 'share/bla.xdi.ini'
my $nocolor    = 0;
my $result     = GetOptions ("energy|e=i"   => \$energy,
			     "incident|i=s" => \$point,
			     'reuse|r'	    => \$reuse,
			     'save|s'	    => \$save,
			     'animate|a'    => \$animate,
			     'plot|p'       => \$plot,
			     'verbose|v'    => \$verbose,
			     'config|c=s'   => \$configfile,
			     'xdiini|x=s'   => \$xdiini,
			     'nocolor|n'    => \$nocolor,
			     'quiet|q'	    => sub { $verbose = 0 },
			     'help|h'	    => sub { pod2usage(1); exit 0},
			    );

my $mode = $ARGV[0] || q{none};
$configfile ||= $ENV{BLACONFIG};
$energy     ||= $ENV{BLAENERGY};
my $nonpublic = 'list|none|test';

my $spectrum = Xray::BLA->new();
if (($^O =~ /MSWin32/) and (not $ENV{FONTCONFIG_FILE})) {
  $plot = 0;
  print $spectrum->assert("Drat! Plotting with gnuplot could not be enabled.\n", 'bold red');
};

my $re = join("|", @{$spectrum->meta->get_attribute('task')->type_constraint->values});
if ($mode !~ m{$re}) {
  (my $str = $re) =~ s{\|($nonpublic)}{}g;
  warn("BLA error: \"$mode\" is not a BLA task (task should be one of $str)\n") && exit 1;
};

if ($mode !~ m{$nonpublic}) {
  warn("BLA error: no file stub specified\n")			    && exit 1 if not $ARGV[1];
  warn("BLA error: no config file specified (use the -c switch)\n") && exit 1 if not $configfile;
  warn("BLA error: $configfile does not exist\n")		    && exit 1 if not -e $configfile;
  warn("BLA error: $configfile cannot be read\n")		    && exit 1 if not -r $configfile;
};

$spectrum -> task($mode);
$spectrum -> stub($ARGV[1]||q{});
$spectrum -> colored(0) if $nocolor;
$spectrum -> read_ini($configfile);
my @elastic =  @{$spectrum -> elastic_energies};

if ($mode !~ m{$nonpublic}) {
  warn("BLA error: no scan folder specified in the configuration file\n")                 && exit 1 if not $spectrum->scanfolder;
  warn("BLA error: the scan folder specified in the configuration file cannot be read\n") && exit 1 if not -d $spectrum->scanfolder;
  warn("BLA error: no tiff folder specified in the configuration file\n")                 && exit 1 if not $spectrum->tiffolder;
  warn("BLA error: the tiff folder specified in the configuration file cannot be read\n") && exit 1 if not -d $spectrum->tiffolder;
  warn("BLA error: no output folder specified in the configuration file\n")               && exit 1 if not $spectrum->outfolder;
};


given ($mode) {
  when  ('herfd') {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit 1 if not $energy;
    $spectrum -> energy($energy);
    $spectrum -> mask(verbose=>$verbose, save=>$save, animate=>$animate);
    my $ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
    $spectrum -> do_plot($ret->message, type=>'data', title=>$spectrum->stub) if $plot;
  };

  when ('mask') {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit 1 if not $energy;
    $spectrum -> screen($verbose);
    $spectrum -> energy($energy);
    $spectrum -> mask(verbose=>$verbose, save=>1, animate=>$animate);
  }

  when ('point') {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit(1) if not $energy;
    warn("BLA error: no energy point specified (use the -i switch)\n")    && exit(1) if ($point < 1);
    $spectrum -> energy($energy);
    my $ret = $spectrum -> read_mask(verbose=>0);
    print(0) && exit(1) if not $ret->status;
    $spectrum->get_incident($point);
    my $value = $spectrum->apply_mask($spectrum->nincident, verbose=>0, silence=>1)->status;
    print $value.$/;
  }

  when ('rixs') {
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    foreach my $e (@elastic) {
      $spectrum -> energy($e);
      my $file = File::Spec->catfile($spectrum -> outfolder, $spectrum->stub."_".$e);
      if (($Xray::BLA::XDI_exists) and (-e $xdiini)) {
	$file .= '.xdi';
      } else {
	$file .= '.dat';
      };
      my $ret = 0;
      if (not -e $file) {
	$spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
	$ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
      } elsif (not $reuse) {
	$spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
	$ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
      } else {
	1;			# do nothing
      };
      $spectrum -> do_plot($ret->message, type=>'data', title=>join(", ", $spectrum->stub, $e), pause=>0.1) if ($ret and $plot);
      $spectrum -> push_herfd_file_list($file);
      $spectrum -> push_herfd_pixels_used($spectrum->npixels);
    };
    $spectrum -> prep_rixs_for_normalization(verbose => $verbose) if $xdiini;
    $spectrum -> rixs_map(verbose => $verbose);
  }

  when ('map') {
    my $need_to_check = 0;
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    warn("BLA error: no absorber element specified in the configuration file\n")          && exit(1) if (not $spectrum->element);
    warn("BLA error: no emission line specified in the configuration file\n")             && exit(1) if (not $spectrum->line);
    foreach my $e (@elastic) {
      $spectrum -> energy($e);
      my $file = $spectrum->mask_file("mask", 'gif');
      if (not -e $file) {
	$spectrum -> mask(save=>1, verbose=>$verbose, animate=>0)
      } elsif (not $reuse) {
	$spectrum -> mask(save=>1, verbose=>$verbose, animate=>0)
      } else {
	$need_to_check = 1;
      };
      $spectrum -> push_elastic_file_list($file);
    };
    if ($need_to_check) {
      my $ret = $spectrum -> check;
      die $spectrum->assert($ret->message, 'bold red') if $ret->status == 0;
      $spectrum -> import_elastic_image;
    };
    my $ret = $spectrum -> energy_map(verbose => $verbose, animate=>$animate);
    $spectrum -> do_plot($ret->message, type=>'load') if $plot;
  }

  when ('xes') {
    $point ||= 0;
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    warn("BLA error: incident energy (-p switch) is not a number\n")                      && exit(1) if (not looks_like_number($point));
    foreach my $e (@elastic) {
      $spectrum -> energy($e);
      my $file = $spectrum->mask_file("mask", 'gif');
      if (not -e $file) {
	$spectrum -> mask(save=>1, verbose=>$verbose, animate=>$animate);
      } elsif (not $reuse) {
	$spectrum -> mask(save=>1, verbose=>$verbose, animate=>$animate);
      } else {
	1;			# do nothing
      };
    };
    my $ret = $spectrum -> compute_xes(verbose=>$verbose, xdiini=>$xdiini, incident=>$point);
    $spectrum->do_plot($ret->message, type=>'data', title=>'Ein = '.$spectrum->incident) if $plot;
  }

  when ('list') {
    my @list = ($spectrum->stub) ? ($spectrum->stub) : sort {$a cmp $b} $spectrum->meta->get_attribute_list;
    foreach my $a (@list) {
      my $string = ($spectrum->colored) ? Term::ANSIColor::colored($a, 'bold green') : $a;
      printf "%s: %s\n", $string, $spectrum->meta->get_attribute($a)->documentation;
    };
  }

  when ('test') {
    die "tests for the BLA code (none currently)...\n";
  }

  default {
    pod2usage(1);
    exit 1;
  }
};


exit 0;

=head1 NAME

bla - wrapper script for bent Laue analyzer + Pilatus data processing

=head1 SYNOPSIS

 bla (herfd|rixs|map|xes|mask|point) [options] <stub>

 Options:
   --config   | -c   [string]   configuration file (*required*)
   --energy   | -e   [integer]  emission energy for HERFD (required for herfd/point tasks)
   --incident | -i   [number]   data point for HERFD or XES (req. for point/xes tasks)
   --xdiini   | -x   [string]   XDI configuration file
   --reuse    | -r   [flag]     reuse mask files for map if found in outfolder
   --animate  | -a   [flag]     save gif animation of mask or energy map creation
   --save     | -s   [flag]     save gif with mask
   --plot     | -p   [flag]     plot computed data (herfd/rixs/map/xes tasks)
   --verbose  | -v   [flag]     write progress messages
   --nocolor  | -n   [flag]     turn off color coding of screen output
   --quiet    | -q   [flag]     suppress progress messages
   --help     | -h   [flag]     write this message and exit

=head1 Options

=over 8

=item B<--config>, B<-c>  (Required)

Specify the location of the ini-style config file.

=item B<--energy>, B<-e>  (Required for herfd and point tasks)

The emission energy at which to compute the XANES spectrum.

=item B<--incident>, B<-i>  (Required for point and xes tasks)

The data point at which to compute the HERFD value.

=item B<--xdiini>, B<-x>

Write HERFD as XDI files using the specified XDI config file.

=item B<--reuse>, B<-r>

Reuse mask files for making energy map if possible.

=item B<--animate>, B<-a>

Write an animated gif showing the steps of mask creation (herfd and
rixs) or the sequence of emission energy masks (map).

=item B<--save>, B<-s>

Write a gif file showing the mask.

=item B<--plot>, B<-p>

Plot HERFD, XES, RIXS, or map data.

=item B<--verbose>, B<-v>   (Default)

Write progress messages to STDOUT.

=item B<--nocolor>, B<-n>

Turn off color coding of screen output

=item B<--quiet>, B<-q>

Suppress progress messages to STDOUT.

=item B<--help>, B<-h>

Print this help message and exit.

=back

=head1 DESCRIPTION

=over 4

=item herfd

Convert a sequence of BLA image to a XANES spectrum at a specified
emission energy.

=item rixs

Convert BLA image to XANES spectrum at a sequence of emission energies.

=item map

Convert a sequence of BLA elastic images to an energy map.

=item mask

Compute a mask for a given emission energy.

=item point

Convert a specified BLA image to the HERFD value at that incidient
energy using a specified emission energy.  Print that value to STDOUT.

=back

A measurement set consists of

=over 4

=item *

A column data file with columns of energy and scalars from the
measurement.

=item *

One Pilatus image for each energy point containing the HERFD signal at
that point.

=item *

A set of Pilatus images taken at energies around the fluorescence
energy.  These are used to make a mask which identifies which pixels
contain signal related to specific emission energies.

=back

This software uses perl and PDL with Imager or Image Magick to process
the images into a high resolution XANES spectrum.

=head1 AUTHOR

Bruce Ravel (bravel AT bnl DOT gov)

L<http://cars9.uchicago.edu/~ravel/software/>

This software was created with advice from and in collaboration with
Jeremy Kropf (kropf AT anl DOT gov)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2011-2012 Bruce Ravel (bravel AT bnl DOT gov). All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlgpl>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

