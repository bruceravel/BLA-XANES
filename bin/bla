#!/usr/bin/perl

use strict;
use warnings;
use Xray::BLA;
use Xray::BLA::Image;
use Config::IniFiles;
use Getopt::Long;
use Pod::Usage;

my $energy     = 0;
my $reuse      = 0;
my $save       = 0;
my $animate    = 0;
my $verbose    = 1;
my $configfile = q{};
my $xdiini     = q{};      # '/home/bruce/git/BLA-XANES/share/bla.xdi.ini'
my $nocolor    = 0;
my $result     = GetOptions ("energy|e=i"   => \$energy,
			     'reuse|r'      => \$reuse,
			     'save|s'       => \$save,
			     'animate|a'    => \$animate,
			     'verbose|v'    => \$verbose,
			     'config|c=s'   => \$configfile,
			     'xdiini|x=s'   => \$xdiini,
			     'nocolor|n'    => \$nocolor,
			     'quiet|q'      => sub { $verbose = 0 },
			     'help|h'       => sub { pod2usage(1); exit 0},
			    );

my $mode = $ARGV[0];

pod2usage(1) && exit 1 if not $ARGV[1];
pod2usage(1) && exit 1 if not $configfile;

my $spectrum = Xray::BLA->new();
$spectrum -> colored(0) if $nocolor;
$spectrum -> read_ini($configfile);
my @elastic =  $spectrum -> elastic_energies;


if ($mode eq 'herfd') {
  pod2usage(1) && exit 1 if not $energy;
  $spectrum -> energy($energy);
  $spectrum -> mask(verbose=>$verbose, save=>$save, animate=>$animate);
  $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);

} elsif ($mode eq 'rixs') {
  foreach my $e (@elastic) {
    $spectrum -> energy($e);
    my $file = File::Spec->catfile($spectrum -> outfolder, $spectrum->stub."_".$e);
    if (($Xray::BLA::XDI_exists) and (-e $xdiini)) {
      $file .= '.xdi';
    } else {
      $file .= '.dat';
    };
    if (not -e $file) {
      $spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
      my $ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
    } elsif (not $reuse) {
      $spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
      my $ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
    } else {
      1;			# do nothing
    };
    $spectrum -> push_herfd_file_list($file);
  };
  $spectrum -> rixs_map(verbose => $verbose);

} elsif ($mode eq 'map') {
  my $need_to_check = 0;
  foreach my $e (@elastic) {
    $spectrum -> energy($e);
    my $file = $spectrum->mask_file("mask", 'gif');
    if (not -e $file) {
      $spectrum -> mask(save=>1, verbose=>$verbose, animate=>0)
    } elsif (not $reuse) {
      $spectrum -> mask(save=>1, verbose=>$verbose, animate=>0)
    } else {
      $need_to_check = 1;
    };
    $spectrum -> push_elastic_file_list($file);
  };
  if ($need_to_check) {
    my $ret = $spectrum -> check;
    die $spectrum->assert($ret->message, 'bold red') if $ret->status == 0;
    $spectrum -> import_elastic_image;
  };
  $spectrum -> energy_map(verbose => $verbose, animate=>$animate);

} elsif ($mode eq 'test') {
  die "test: nothing here\n";

} else {
  pod2usage(1);
  exit 1;

};

exit 0;

=head1 NAME

bla - wrapper script for bent Laue analyzer HERFD, RIXS, and energy map functions

=head1 SYNOPSIS

 bla herfd [options] <stub>
 bla rixs  [options] <stub>
 bla map   [options] <stub>

 Options:
   --config  | -c   [string]   configuration file (*required*)
   --energy  | -e   [integer]  emission energy for HERFD (required for HERFD)
   --reuse   | -r   [flag]     reuse mask files for map if found in outfolder
   --animate | -a   [flag]     save tiff animation of mask or energy map creation
   --save    | -s   [flag]     save tiff with mask
   --verbose | -v   [flag]     write progress messages
   --nocolor | -n   [flag]     turn off color coding of screen output
   --quiet   | -q   [flag]     suppress progress messages
   --help    | -h   [flag]     write this message and exit

=head1 Options

=over 8

=item B<--config>, B<-c>  (Required)

Specify the location of the ini-style config file giving the input and
output locations on disk and other information.

=item B<--energy>, B<-e>  (Required for HERFD)

The emission energy at which to compute the XANES spectrum.

=item B<--reuse>, B<-r>

Reuse mask files for making energy map if they are found in output
folder.  This may happen, for instance, if the rixs function has
already been run.

=item B<--animate>, B<-a>

Write an animated gif showing the steps of mask creation (herfd and
rixs) or the sequence of emission energy masks (map).

=item B<--save>, B<-s>

Write a tiff file showing the mask.

=item B<--verbose>, B<-v>   (Default)

Write progress messages to STDOUT.

=item B<--nocolor>, B<-n>

Turn off color coding of screen output

=item B<--quiet>, B<-q>

Suppress progress messages to STDOUT.

=item B<--help>, B<-h>

Print this help message and exit.

=back

=head1 DESCRIPTION

=over 4

=item herfd

Convert a sequence of BLA image to a XANES spectrum at a specified
emission energy.

=item rixs

Convert BLA image to XANES spectrum at a sequence of emission energies.

=item map

Convert a sequence of BLA elastic images to an energy map.

=back

A measurement set consists of

=over 4

=item *

A column data file with columns of energy and scalars from the
measurement.

=item *

One Pilatus image for each energy point containing the HERFD signal at
that point.

=item *

A set of Pilatus images taken at energies around the fluorescence
energy.  These are used to make a mask which identifies which pixels
contain signal related to specific emission energies.

=back

This software uses perl and Imager or Image Magick to process the
images into a high resolution XANES spectrum.

=cut
