#!/usr/bin/perl

BEGIN {
  if ($^O =~ /MSWin32/) {
    my $fname='C:\strawberry\c\bin\etc\fonts\fonts.conf';
    $ENV{FONTCONFIG_FILE}=$fname if -e $fname;
  };
}

use Xray::BLA; # automatically turns on strict and warnings
use Config::IniFiles;
use Getopt::Long;
use Pod::Usage;
use Scalar::Util qw(looks_like_number);
use Term::Sk;
use Text::Wrap;

my $energy      = 0;
my $point       = -1;
my $reuse       = 0;
my $save        = 0;
my $animate     = 0;
my $plot        = 0;
my $verbose     = 1;
my $configfile  = q{};
my $xdiini      = q{};      # 'share/bla.xdi.ini'
my $nocolor     = 0;
my $outimage    = 'gif';
my $noscan      = 0;
my $xesimage    = 0;
my $result      = GetOptions ("energy|e=i"   => \$energy,
			      "incident|i=s" => \$point,
			      'reuse|r'	     => \$reuse,
			      'save|s'	     => \$save,
			      #'animate|a'    => \$animate,
			      'plot|p'       => \$plot,
			      'verbose|v'    => \$verbose,
			      'config|c=s'   => \$configfile,
			      'xdiini|x=s'   => \$xdiini,
			      'nocolor|n'    => \$nocolor,
			      'format|f=s'   => \$outimage,
			      'noscan'       => \$noscan,
			      'xesimage=s'   => \$xesimage,
			      'quiet|q'	     => sub { $verbose = 0 },
			      'help|h'	     => sub { pod2usage(1); exit 0},
			    );

my $nonpublic = 'list|none|test';
my $mode = $ARGV[0] || q{none};
$configfile ||= $ENV{BLACONFIG};
$energy     ||= $ENV{BLAENERGY};
$xdiini     ||= $ENV{BLAXDIINI};
$outimage = 'gif' if ($outimage !~ m{png|tif});

my $spectrum = Xray::BLA->new(outimage=>$outimage, masktype=>'single', noscan=>$noscan);
if (($^O =~ /MSWin32/) and (not $ENV{FONTCONFIG_FILE})) {
  $plot = 0;
  print $spectrum->report("Drat! Plotting with gnuplot could not be enabled.\n", 'bold red');
};

my $re = join("|", @{$spectrum->meta->get_attribute('task')->type_constraint->values});
#my $re = join("|", qw(herfd rixs point map mask xes test list none));
if ($mode !~ m{$re}) {
  (my $str = $re) =~ s{\|($nonpublic)}{}g;
  warn("BLA error: \"$mode\" is not a BLA task (task should be one of $str)\n") && exit 1;
};

if ($mode !~ m{$nonpublic}) {
  warn("BLA error: no file stub specified\n")			    && exit 1 if not $ARGV[1];
  warn("BLA error: no config file specified (use the -c switch)\n") && exit 1 if not $configfile;
  warn("BLA error: $configfile does not exist\n")		    && exit 1 if not -e $configfile;
  warn("BLA error: $configfile cannot be read\n")		    && exit 1 if not -r $configfile;
};

$spectrum -> task($mode);
$spectrum -> stub($ARGV[1]||q{});
$spectrum -> colored(0) if $nocolor;
$spectrum -> read_ini($configfile);
$spectrum -> xdi_metadata_file($xdiini) if ($xdiini and -e $xdiini);
warn("BLA error: no processing steps specified in the configuration file\n") && exit 1
  if (($#{$spectrum->steps} == 0) and ($mode ne 'list'));

my @elastic =  @{$spectrum -> elastic_energies};

if ($mode !~ m{$nonpublic}) {
  warn("BLA error: no scan folder specified in the configuration file\n")                 && exit 1 if not $spectrum->scanfolder;
  warn("BLA error: the scan folder specified in the configuration file cannot be read\n") && exit 1 if not -d $spectrum->scanfolder;
  warn("BLA error: no tiff folder specified in the configuration file\n")                 && exit 1 if not $spectrum->tiffolder;
  warn("BLA error: the tiff folder specified in the configuration file cannot be read\n") && exit 1 if not -d $spectrum->tiffolder;
  warn("BLA error: no output folder specified in the configuration file\n")               && exit 1 if not $spectrum->outfolder;
};


MODE: {

  ## --------------------------------------------------------------------------------
  ## ----- compute HERFD at a specified emission energy
  ($mode eq 'herfd') and do {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit 1 if not $energy;
    $spectrum -> energy($energy);
    $spectrum -> mask(verbose=>$verbose, save=>$save, animate=>$animate, plot=>$plot);
    my $ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
    $spectrum -> plot_xanes(type=>'data', title=>$spectrum->stub) if $plot;
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- compute a single mask at a specified emission energy
  ($mode eq 'mask') and do {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit 1 if not $energy;
    $spectrum -> screen($verbose);
    $spectrum -> energy($energy);
    $spectrum -> mask(verbose=>$verbose, save=>1, animate=>$animate, plot=>$plot);
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- using a mask, compute a HERFD energy point from the image for that energy
  ($mode eq 'point') and do {
    $energy = $elastic[0] if ((not $energy) and ($#elastic == 0));
    warn("BLA error: no emission energy specified (use the -e switch)\n") && exit(1) if not $energy;
    warn("BLA error: no energy point specified (use the -i switch)\n")    && exit(1) if ($point < 1);
    $spectrum -> energy($energy);
    my $ret = $spectrum -> read_mask(verbose=>0);
    print(0) && exit(1) if not $ret->status;
    $spectrum -> get_incident($point);
    my $value = $spectrum->apply_mask($spectrum->nincident, verbose=>0, silence=>1)->status;
    print $value.$/;
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- compute HERFD for a sequence of emission energies (XAS-like RIXS plane)
  ($mode eq 'rixs') and do {
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    foreach my $e (@elastic) {
      $spectrum -> energy($e);
      my $file = File::Spec->catfile($spectrum -> outfolder, $spectrum->stub."_".$e);
      #if (($Xray::BLA::XDI_exists) and (-e $xdiini)) {
      $file .= '.xdi';
      #} else {
      #  $file .= '.dat';
      #};
      my $ret = Xray::BLA::Return->new;
      if (not -e $file) {
	$spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
	$ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
      } elsif (not $reuse) {
	$spectrum -> mask(save=>$save, verbose=>$verbose, animate=>$animate);
	$ret = $spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);
      } else {
	$ret->status(0); # do nothing
      };
      $spectrum -> plot_rixs($ret->message, type=>'data', title=>join(", ", $spectrum->stub, $e), pause=>0.1) if ($ret->status and $plot);
      $spectrum -> push_herfd_file_list($file);
      $spectrum -> push_herfd_pixels_used($spectrum->npixels);
    };
    $spectrum -> prep_rixs_for_normalization(verbose => $verbose) if $xdiini;
    $spectrum -> rixs_map(verbose => $verbose);
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- compute XES for a sequence of incident energies (XES-like RIXS plane)
  ($mode eq 'plane') and do {
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    fetch_elastic_sequence($spectrum, $verbose, $animate);
    my $holol;			# compute_xes returns a list-of-lists, so this is a hash-of-lol
    my $count = 0;
    my $save = $spectrum->ui;
    $spectrum->ui('none');

    my $counter;
    $counter = Term::Sk->new('Computing RIXS plane, time elapsed: %8t %15b (emission energy %c of %m)',
			     {freq => 's', base => 1, target=>$#elastic+1}) if ($verbose);
    foreach my $e (@elastic) {
      $counter->up if $verbose;
      ++$count;
      $spectrum -> energy($e);
      my $ret;
      my $file = $spectrum->file_template($spectrum->elastic_file_template);
      $ret = $spectrum -> compute_xes(verbose=>0, xdiini=>$xdiini, incident=>$e, xesimage=>$file, nofile=>1);
      $holol->{$e} = $ret;	# $ret is a list-of-lists
    };
    $counter->close if $verbose;
    #use Data::Dump::Color;
    #dd $holol;
    my $planefile = $spectrum->rixs_plane($holol, xdiini=>$xdiini);
    $spectrum->report("Wrote $planefile", 'bold green');
    $spectrum->ui($save);
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- turn a sequence of masks into a pixel-to-energy map, with smoothing and interpolation
  ($mode eq 'map') and do {
    my $need_to_check = 0;
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    warn("BLA error: no absorber element specified in the configuration file\n")          && exit(1) if (not $spectrum->element);
    warn("BLA error: no emission line specified in the configuration file\n")             && exit(1) if (not $spectrum->line);
    $need_to_check = fetch_elastic_sequence($spectrum, $verbose, 0);
    if ($need_to_check) {
      my $ret = $spectrum -> check;
      die $spectrum->report($ret->message, 'bold red') if $ret->status == 0;
      #$spectrum -> import_elastic_image;
    };
    my $ret = $spectrum -> energy_map(verbose => $verbose, animate=>$animate);
    $spectrum -> plot_map($ret->message, type=>'load') if $plot;
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- compute XES from an image at a given incident energy
  ($mode eq 'xes') and do {
    $point ||= 0;
    warn("BLA error: no list of emission energies specified in the configuration file\n") && exit(1) if not @elastic;
    warn("BLA error: incident energy (-i switch) is not a number\n")                      && exit(1) if (not looks_like_number($point));
    fetch_elastic_sequence($spectrum, $verbose, $animate);
    $Xray::BLA::stack = undef;
    my $ret;
    if ($xesimage) {
      $ret = $spectrum -> compute_xes(verbose=>$verbose, xdiini=>$xdiini, incident=>$point, xesimage=>$xesimage);
    } else {
      $ret = $spectrum -> compute_xes(verbose=>$verbose, xdiini=>$xdiini, incident=>$point);
    };
    $spectrum->plot_xes($ret->message, type=>'data', title=>'Ein = '.$spectrum->incident) if $plot;
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- echo Xray::BLA attribute documentation to the screen
  ($mode eq 'list') and do {
    ##my @list = ($spectrum->stub) ? ($spectrum->stub) : sort {$a cmp $b} $spectrum->meta->get_attribute_list;
    my @list = sort {$a cmp $b} $spectrum->meta->get_attribute_list;
    local $Text::Wrap::columns = 120;
    my $count = 0;
    foreach my $a (@list) {
      my $color = ($count%2) ? 'bold green' : 'bold cyan';
      my $string = ($spectrum->colored) ? Term::ANSIColor::colored($a, $color) : $a;
      printf wrap($string.": ", " " x (length($a)+2), $spectrum->meta->get_attribute($a)->documentation) . $/;
      $count++;
    };
    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- testing space, do whatever is written below
  ($mode eq 'test') and do {
    #die "tests for the BLA code (none currently)...\n";
    #my $buffer = 18;

    # my $hash = $spectrum->fetch_metadata(File::Spec->catfile($spectrum->tiffolder, $xesimage));
    # use Data::Dump::Color;
    # dd $hash;

    my $buffer = 15;
    opendir(my $PROC, $spectrum->outfolder);
    my $regex = $spectrum->stub . '_\d+_mask';
    my @all_elastic = sort grep {$_ =~ m{$regex}} readdir $PROC;
    closedir $PROC;
    #use Data::Dump::Color;
    #dd @all_elastic;
    use PDL::IO::Pic qw(wim rim);
    my $toss = rim(File::Spec->catfile($spectrum->outfolder, $all_elastic[0]));
    my $count = 0;
    my $last = PDL::Core::ones($toss->dims);
    foreach my $mask (@all_elastic) {
      print '.';
      my $file = File::Spec->catfile($spectrum->outfolder, $mask);
      (my $out = $file) =~ s{mask}{shield};
      my $pdl;
      $pdl = PDL::Core::zeros($toss->dims);
      if ($count > $buffer) {
    	$pdl = $last + rim(File::Spec->catfile($spectrum->outfolder, $all_elastic[$count-$buffer+1]));
    	my $kernel = PDL::Core::ones(2,2);
    	my $smoothed = $last->gt(0,0)->or2( $pdl->conv2d($kernel, {Boundary => 'Truncate'})->ge(2,0), 0 );
    	$pdl = $smoothed;
      };
      $pdl -> wim($out);
      $last = $pdl;
      ++$count;
    };
    print $/;

    last MODE;
  };

  ## --------------------------------------------------------------------------------
  ## ----- fall back is to display usage text
  pod2usage(1);
  exit 1;
};


sub fetch_elastic_sequence {
  my ($spectrum, $verbose, $animate) = @_;
  my $need_to_check = 0;
  foreach my $e (@elastic) {
    $spectrum -> energy($e);
    my $file = $spectrum->mask_file("mask", $spectrum->outimage);
    if (not -e $file) {
      $spectrum -> mask(save=>1, verbose=>$verbose, animate=>$animate, useshield=>$spectrum->shield);
    } elsif (not $reuse) {
      $spectrum -> mask(save=>1, verbose=>$verbose, animate=>$animate, useshield=>$spectrum->shield);
    } else {
      $need_to_check = 1;
    };
    $spectrum -> push_elastic_file_list($file);
  };
  return $need_to_check;
};


exit 0;

=head1 NAME

bla - wrapper script for bent Laue analyzer + Pilatus data processing

=head1 SYNOPSIS

 bla (herfd|rixs|map|xes|mask|plane|point) [options] <stub>

 Options:
   --config   | -c   [string]   configuration file (*required*)
   --energy   | -e   [integer]  emission energy for HERFD (required for herfd/point tasks)
   --incident | -i   [number]   data point for HERFD or XES (req. for point/xes tasks)
   --xdiini   | -x   [string]   XDI configuration file
   --reuse    | -r   [flag]     reuse mask files for map if found in outfolder
   --noscan          [flag]     XES measurement made without scan file
   --xesimage        [integer/string] repetition number or filename of XES image
   --save     | -s   [flag]     save gif with mask
   --plot     | -p   [flag]     plot computed data (herfd/rixs/map/xes tasks)
   --verbose  | -v   [flag]     write progress messages
   --nocolor  | -n   [flag]     turn off color coding of screen output
   --format   | -f   [string]   output static image format, gif or tif
   --quiet    | -q   [flag]     suppress progress messages
   --help     | -h   [flag]     write this message and exit

=head1 SWITCHES

=over 8

=item B<--config>, B<-c>  (Required)

Specify the location of the ini-style config file.

=item B<--energy>, B<-e>  (Required for herfd and point tasks)

The emission energy at which to compute the XANES spectrum.

=item B<--incident>, B<-i>  (Required for point and xes tasks)

The data point at which to compute the HERFD value.

=item B<--xdiini>, B<-x>

Write HERFD as XDI files using the specified XDI config file.

=item B<--reuse>, B<-r>

Reuse mask files for making energy map if possible.

=item B<--noscan>

XES measurement was made without using a scan file

=item B<--xesmage>

Indicate the file name or repetition number of the XES image to be
processed.

=item B<--save>, B<-s>

Write a gif file showing the mask.

=item B<--plot>, B<-p>

Plot HERFD, XES, RIXS, or map data.

=item B<--verbose>, B<-v>   (Default)

Write progress messages to STDOUT.

=item B<--nocolor>, B<-n>

Turn off color coding of screen output

=item -B<--format>, B<-f>

Specify output format for static (non-animated) images (gif|tif)

=item B<--quiet>, B<-q>

Suppress progress messages to STDOUT.

=item B<--help>, B<-h>

Print this help message and exit.

=back

=head1 DESCRIPTION

=over 4

=item herfd

Convert a sequence of BLA image to a XANES spectrum at a specified
emission energy.

=item rixs

Convert BLA image to XANES spectrum at a sequence of emission energies.

=item map

Convert a sequence of BLA elastic images to an energy map.

=item mask

Compute a mask for a given emission energy.

=item xes

Compute the XES spectrum at a given incident energy or using a
specified image.

=item plane

Compute the rixs plane as XES as a function of incident energy.  This
is similar to the rixs task except that this is intended for making a
surface plot while the rixs task is intended to be displayed as XAS
spectra.

=item point

Convert a specified BLA image to the HERFD value at that incidient
energy using a specified emission energy.  Print that value to STDOUT.

=back

A measurement set consists of

=over 4

=item *

A column data file with columns of energy and scalars from the
measurement.

=item *

One Pilatus image for each energy point containing the HERFD signal at
that point OR...

=item *

One or more images used to compute XES at a specific incident energy.

=item *

A set of Pilatus images taken at energies around the fluorescence
energy.  These are used to make a mask which identifies which pixels
contain signal related to specific emission energies.

=back

=head1 AUTHOR

Bruce Ravel (bravel AT bnl DOT gov)

L<http://cars9.uchicago.edu/~ravel/software/>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2011-2014,2016 Bruce Ravel, Jeremy Kropf. All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlgpl>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

