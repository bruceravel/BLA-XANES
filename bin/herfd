#!/usr/bin/perl

use strict;
use warnings;
use Xray::BLA;
use Config::IniFiles;
use Getopt::Long;
use Pod::Usage;

my $energy     = 0;
my $verbose    = 1;
my $save       = 0;
my $animate    = 0;
my $nocolor    = 0;
my $configfile = q{};
my $xdiini     = q{};      # '/home/bruce/git/BLA-XANES/share/bla.xdi.ini'
my $result  = GetOptions ("energy|e=i"  => \$energy,
			  'save|s'      => \$save,
			  'animate|a'   => \$animate,
			  'verbose|v'   => \$verbose,
			  'config|c=s'  => \$configfile,
			  'xdiini|x=s'  => \$xdiini,
			  'nocolor|n'   => \$nocolor,
			  'quiet|q'     => sub { $verbose = 0 },
			  'help|h'      => sub { pod2usage(1); exit 0},
			 );

pod2usage(1) && exit 1 if not $ARGV[0];
pod2usage(1) && exit 1 if not $configfile;
pod2usage(1) && exit 1 if not $energy;

tie my %ini, 'Config::IniFiles', ( -file => $configfile );

my $spectrum = Xray::BLA->new();
$spectrum -> scanfolder	($ini{measure}{scanfolder});
$spectrum -> tifffolder	($ini{measure}{tiffolder});
$spectrum -> outfolder	($ini{measure}{outfolder});
$spectrum -> stub       ($ARGV[0]);
$spectrum -> energy($energy);
$spectrum -> colored(0) if $nocolor;

$spectrum -> bad_pixel_value   ($ini{pixel}{bad})      if exists $ini{pixel}{bad};
$spectrum -> weak_pixel_value  ($ini{pixel}{weak})     if exists $ini{pixel}{weak};
$spectrum -> lonely_pixel_value($ini{pixel}{lonely})   if exists $ini{pixel}{lonely};
$spectrum -> social_pixel_value($ini{pixel}{social})   if exists $ini{pixel}{social};
$spectrum -> maskmode          ($ini{pixel}{maskmode}) if exists $ini{pixel}{maskmode};
$spectrum -> radius            ($ini{pixel}{radius})   if exists $ini{pixel}{radius};

$spectrum -> mask(verbose=>$verbose, save=>$save, animate=>$animate);
$spectrum -> scan(verbose=>$verbose, xdiini=>$xdiini);

exit 0;

=head1 NAME

herfd - convert a sequence of BLA image to a XANES spectrum at a specified emission energy

=head1 SYNOPSIS

herfd [options] <stub>

 Options:
     --config  | -c   [string]  configuration file (required)
     --energy  | -e   [integer] emission energy (required)
     --animate | -a   [flag]    save tiff animation of mask creation
     --save    | -s   [flag]    save tiff with mask
     --verbose | -v   [flag]    write progress messages
     --nocolor | -n   [flag]    turn off color coding of screen output
     --quiet   | -q   [flag]    suppress progress messages
     --help    | -h   [flag]    write this message and exit

=head1 Options

=over 8

=item B<--config>, B<-c>  (Required)

Specify the location of the ini-style config file giving the input and
output locations on disk and other information.

=item B<--energy>, B<-e>  (Required)

The emission energy at which to compute the XANES spectrum.

=item B<--animate>, B<-a>

Write an animated tiff showing the steps of mask creation.

=item B<--save>, B<-s>

Write a tiff file showing the mask.

=item B<--verbose>, B<-v>   (Default)

Write progress messages to STDOUT.

=item B<--nocolor>, B<-n>

Turn off color coding of screen output

=item B<--quiet>, B<-q>

Suppress progress messages to STDOUT.

=item B<--help>, B<-h>

Print this help message and exit.

=back

=head1 DESCRIPTION

A measurement set consists of

=over 4

=item *

A column data file with columns of energy and scalars from the
measurement.

=item *

One Pilatus image for each energy point containing the HERFD signal at
that point.

=item *

A set of Pilatus images taken at energies around the fluorescence
energy.  These are used to make a mask which identifies which pixels
contain signal related to specific emission energies.

=back

This software uses perl and Imager or Image Magick to process the
images into a high resolution XANES spectrum.

=cut
